#!/usr/bin/perl -w

use strict;

use constant {
    false => 0,
    true  => 1
};

my @iso2oem = (
    0x3F, 0x3F, 0x27, 0x9F, 0x22, 0x2E, 0xC5, 0xCE,
    0x5E, 0x25, 0x53, 0x3C, 0x4F, 0x3F, 0x3F, 0x3F,
    0x3F, 0x27, 0x27, 0x22, 0x22, 0x07, 0x2D, 0x2D,
    0x7E, 0x54, 0x73, 0x3E, 0x6F, 0x3F, 0x3F, 0x59,
    0xFF, 0xAD, 0xBD, 0x9C, 0xCF, 0xBE, 0xDD, 0xF5,
    0xF9, 0xB8, 0xA6, 0xAE, 0xAA, 0xF0, 0xA9, 0xEE,
    0xF8, 0xF1, 0xFD, 0xFC, 0xEF, 0xE6, 0xF4, 0xFA,
    0xF7, 0xFB, 0xA7, 0xAF, 0xAC, 0xAB, 0xF3, 0xA8,
    0xB7, 0xB5, 0xB6, 0xC7, 0x8E, 0x8F, 0x92, 0x80,
    0xD4, 0x90, 0xD2, 0xD3, 0xDE, 0xD6, 0xD7, 0xD8,
    0xD1, 0xA5, 0xE3, 0xE0, 0xE2, 0xE5, 0x99, 0x9E,
    0x9D, 0xEB, 0xE9, 0xEA, 0x9A, 0xED, 0xE8, 0xE1,
    0x85, 0xA0, 0x83, 0xC6, 0x84, 0x86, 0x91, 0x87,
    0x8A, 0x82, 0x88, 0x89, 0x8D, 0xA1, 0x8C, 0x8B,
    0xD0, 0xA4, 0x95, 0xA2, 0x93, 0xE4, 0x94, 0xF6,
    0x9B, 0x97, 0xA3, 0x96, 0x81, 0xEC, 0xE7, 0x98
);

my @oem2koi = (
    0xE1, 0xE2, 0xF7, 0xE7, 0xE4, 0xE5, 0xF6, 0xFA,
    0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0,
    0xF2, 0xF3, 0xF4, 0xF5, 0xE6, 0xE8, 0xE3, 0xFE,
    0xFB, 0xFD, 0xFF, 0xF9, 0xF8, 0xFC, 0xE0, 0xF1,
    0xC1, 0xC2, 0xD7, 0xC7, 0xC4, 0xC5, 0xD6, 0xDA,
    0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0,
    0x90, 0x91, 0x92, 0x81, 0x87, 0xB2, 0xB4, 0xA7,
    0xA6, 0xB5, 0xA1, 0xA8, 0xAE, 0xAD, 0xAC, 0x83,
    0x84, 0x89, 0x88, 0x86, 0x80, 0x8A, 0xAF, 0xB0,
    0xAB, 0xA5, 0xBB, 0xB8, 0xB1, 0xA0, 0xBE, 0xB9,
    0xBA, 0xB6, 0xB7, 0xAA, 0xA9, 0xA2, 0xA4, 0xBD,
    0xBC, 0x85, 0x82, 0x8D, 0x8C, 0x8E, 0x8F, 0x8B,
    0xD2, 0xD3, 0xD4, 0xD5, 0xC6, 0xC8, 0xC3, 0xDE,
    0xDB, 0xDD, 0xDF, 0xD9, 0xD8, 0xDC, 0xC0, 0xD1,
    0xB3, 0xA3, 0x99, 0x98, 0x93, 0x9B, 0x9F, 0x97,
    0x9C, 0x95, 0x9E, 0x96, 0xBF, 0x9D, 0x94, 0x9A
);

sub zip_fix_name {
    my $path = shift;

    my $ochar;
    my $result = "";
    for my $char (split(//, $path)) {
        if (ord($char) < 0x80) {
            $result .= $char;
        } else {
            $ochar = $iso2oem[ord($char)-0x80];
            if ($ochar < 0x80) {
                $result .= chr($ochar);
            } else {
                $result .= chr($oem2koi[$ochar-0x80]);
            }
        }
    }
    return $result;
}

sub zip_list {
    my $zipfile = shift;

    if (open(PIPE, "unzip -Z -s -T $zipfile |")) {
        my ($parent, $prev) = ("", "");
        my ($dir, $perms, $size, $year, $mon, $mday, $hour, $min, $path);
        while (<PIPE>) {
            if (m!^([dsp?-])([r-][w-][x-])([a-][h-][s-]|[r-][w-][xs-][r-][w-][x-]) +\d+\.\d+ \w+ +(\d+) [tbTB][xlX-] .{4} ([0-9]{4})([0-9]{2})([0-9]{2})\.([0-9]{2})([0-9]{2})[0-9]{2} (.+?)/{0,1}\n$!) {
                $dir = $1;
                $perms = $2;
                $size = $4;
                $year = $5;
                $mon = $6;
                $mday = $7;
                $hour = $8;
                $min = $9;
                $path = $10;
                $path = zip_fix_name($path);

                next if ($prev =~ m!^\Q$path\E/!);

                $parent = ($path =~ m!^(.+)/!) ? $1 : "";
                if ($prev !~ m!^\Q$parent\E!) {
                    my $ignore_equal = true;
                    my @parelems = split(m!/!, $parent);
                    my @prevelems = split(m!/!, $prev);
                    for (my $i = 0; $i < scalar @parelems; $i++) {
                        next if ($ignore_equal && defined($prevelems[$i]) &&
                            ($parelems[$i] eq $prevelems[$i]));
                        $ignore_equal = false if ($ignore_equal);
                        printf("drwxrwxrwx 0 0 0 %04d-%02d-%02d %02d:%02d ",
                            $year, $mon, $mday, $hour, $min);
                        for (my $j = 0; $j <= $i; $j++) {
                            print($parelems[$j]);
                            print("/") if ($j < $i);
                        }
                        print("\n");
                    }
                }

                printf("%s%s%s%s 0 0 %s %04d-%02d-%02d %02d:%02d %s\n",
                    ($dir eq 'd') ? 'd' : '-', $perms, $perms, $perms, $size, $year, $mon, $mday, $hour, $min, $path);

                $prev = $path;
            } else {
                print(STDERR "[zip] $_");
            }
        }
        close(PIPE);
    }
}

if (defined($ARGV[1]) && ($ARGV[0] eq "list")) {
    my $zipfile = $ARGV[1];
    &zip_list($zipfile);
} else {
    exit(1);
}

exit(0);
# kate: indent-mode normal;
